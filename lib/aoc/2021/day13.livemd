<!-- vim: syntax=markdown -->

# Day 13

## Setup

```elixir
Mix.install([
  {:kino, "~> 0.4"}
])
```

```elixir
input = Kino.Input.textarea("Please paste input:")
```

```elixir
{dots, commands} =
  Kino.Input.read(input)
  |> String.split("\n", trim: true)
  |> Enum.reduce({MapSet.new(), []}, fn line, {dots, commands} ->
    case String.split(line, ",") do
      [x, y] ->
        {
          MapSet.put(dots, {String.to_integer(x), String.to_integer(y)}),
          commands
        }

      ["fold along " <> c] ->
        [axis, at] = String.split(c, "=")
        command = {axis, String.to_integer(at)}

        {
          dots,
          commands ++ [command]
        }
    end
  end)
```

## Part 1

```elixir
dots =
  commands
  |> Enum.take(1)
  |> Enum.reduce(dots, fn
    {"x", at}, dots ->
      for {x, y} <- dots, into: MapSet.new(), do: {at - abs(at - x), y}

    {"y", at}, dots ->
      for {x, y} <- dots, into: MapSet.new(), do: {x, at - abs(at - y)}
  end)

Enum.count(dots)
```

## Part 2

```elixir
dots =
  commands
  |> Enum.reduce(dots, fn
    {"x", at}, dots ->
      for {x, y} <- dots, into: MapSet.new(), do: {at - abs(at - x), y}

    {"y", at}, dots ->
      for {x, y} <- dots, into: MapSet.new(), do: {x, at - abs(at - y)}
  end)

Enum.map(0..6, fn y ->
  Enum.map(0..40, fn x ->
    if {x, y} in dots, do: "##", else: "  "
  end)
end)
|> Enum.intersperse("\n")
|> IO.puts()
```
