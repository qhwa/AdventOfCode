<!-- vim: syntax=markdown -->

# AoC Day10

## Setup

```elixir
Mix.install([
  {:kino, "~> 0.4"}
])
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input = Kino.Input.textarea("Please input:")
```

```elixir
input =
  input
  |> Kino.Input.read()
  |> String.split("\n", trim: true)
```

## The little syntax checker

```elixir
defmodule SyntaxChecker do
  @pairs %{
    ?( => ?),
    ?[ => ?],
    ?{ => ?},
    ?< => ?>
  }

  @corrupt_scores %{
    ?) => 3,
    ?] => 57,
    ?} => 1197,
    ?> => 25137
  }

  @completion_scores %{
    ?) => 1,
    ?] => 2,
    ?} => 3,
    ?> => 4
  }

  def score(code, stack \\ [])

  def score(<<open_char, code::binary>>, stack) when is_map_key(@pairs, open_char) do
    %{^open_char => close_char} = @pairs
    score(code, [close_char | stack])
  end

  def score(<<close_char, code::binary>>, [close_char | stack]),
    do: score(code, stack)

  def score(<<close_char, _::binary>>, _) do
    %{^close_char => score} = @corrupt_scores
    {:corrupted, score}
  end

  def score("", stack) do
    completing_score =
      Enum.reduce(stack, 0, fn close_char, score ->
        score * 5 + @completion_scores[close_char]
      end)

    {:incomplete, completing_score}
  end
end
```

## Part 1

```elixir
input
|> Stream.map(&SyntaxChecker.score/1)
|> Stream.filter(&match?({:corrupted, _}, &1))
|> Stream.map(fn {_, score} -> score end)
|> Enum.sum()
```

## Part 2

```elixir
scores =
  input
  |> Stream.map(&SyntaxChecker.score/1)
  |> Stream.filter(&match?({:incomplete, _}, &1))
  |> Stream.map(fn {_, score} -> score end)
  |> Enum.sort()

center = div(length(scores), 2)
Enum.at(scores, center)
```
